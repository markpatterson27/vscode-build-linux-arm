# This is a basic workflow to help you get started with Actions

name: ARM builds

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
        
    # Install additional dependancies (node and yarn should already be installed)
    - name: Install dependancies
      run: sudo apt install -y libx11-dev libxkbfile-dev libsecret-1-dev fakeroot
      
    # Install and configure cross-compile toolchain
    - name: Install and configure cross-compile toolchain
      run: |
        sudo apt install -y qemu qemu-user-static debootstrap gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
        sudo qemu-debootstrap --arch=arm64 --variant=minbase xenial rootfs
        sudo chroot rootfs apt-get install -y libx11-dev
        export CC=$(which arm-linux-gnueabihf-gcc)
        export CXX="$(which arm-linux-gnueabihf-g++) -L$(pwd)/rootfs/usr/lib/arm-linux-gnueabihf/"
        export npm_config_arch=arm

    # Clone vscode repo
    - name: Clone VS Code repository
      run: git clone --depth 1 https://github.com/microsoft/vscode.git --branch 1.47.2

    # # Replace product.json with our one
    - name: Copy in product.json
      run: cp ./product-debug.json ./vscode/product.json

    # # cd vscode
    # - name: change directory
    #   run: cd vscode
    
    # yarn
    - name: yarn
      run: yarn --cwd vscode

    # rebuild electron
    - name: rebuild electron and sqlite3
      run: |
        sed -i -z 's/,\n[^\n]*arm[^\n]*//' vscode/node_modules/vscode-sqlite3/binding.gyp
        sed -i "s/Release\/sqlite'/Release\/sqlite.node'/" vscode/node_modules/vscode-sqlite3/lib/sqlite3.js
        yarn --cwd vscode add -D electron-rebuild
        npx --cwd vscode electron-rebuild -f -w vscode-sqlite3

    # minify armhf
    # - name: yarn minify 32-bit
    #   run: yarn --cwd vscode run gulp vscode-linux-arm-min

    # # build deb armhf
    # - name: yarn build deb 32-bit
    #   run: yarn --cwd vscode run gulp vscode-linux-arm-build-deb

    # minify arm64
    - name: yarn minify 64-bit
      run: yarn --cwd vscode run gulp vscode-linux-arm64-min

    # build deb arm64
    - name: yarn build deb 64-bit
      run: yarn --cwd vscode run gulp vscode-linux-arm64-build-deb

    # check build dir
    - name: list deb files
      run: find ./vscode/.build -type f -name "*.deb"

    # upload debs as release. using hub cli
    - name: release debs
      run: |
        set -x
        assets=()
        for asset in $(find ./vscode/.build -type f -name "*.deb"); do
          assets+=("-a" "$asset")
        done
        tag_name="test-electron-rebuild"
        hub release create "${assets[@]}" -m "$tag_name" "$tag_name"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # tag_name="${GITHUB_REF##*/}"

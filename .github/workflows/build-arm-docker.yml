#
name: ARM builds

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    # branches: [ master ]
    tags: ["v*"] # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  # Create release
  build-arms-on-docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Install cross architecture support
      run: sudo apt update && sudo apt-get install -y qemu binfmt-support qemu-user-static # Install the qemu packages

    - name: Register arch support with docker
      run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes # This step will execute the registering scripts

    # - name: Check cross arch support
    #   run: docker run --rm -t arm64v8/ubuntu uname -m # Testing the emulation environment

    # build 64bit container
    - name: Build docker 64bit container
      run: docker build -t builder -t builder64 -f Dockerfile-builder64 .

    # build 32bit container
    - name: Build docker 32bit container
      run: docker build -t builder32 -f Dockerfile-builder32 .

    # clone vscode repo
    - name: Clone VS Code repository
      run: git clone --depth 1 https://github.com/microsoft/vscode.git --branch 1.49.1

    # Replace product.json with our one
    - name: Copy in product.json
      run: cp ./product.json ./vscode/product.json

    # inherit group ownership
    # - name: inherit group ownership
    #   run: chmod g+s ./vscode

    # yarn
    - name: yarn in docker
      run: docker run -v $(pwd)/vscode:/vscode builder64 /bin/bash -c "ls -al /vscode; yarn --cwd /vscode --network-timeout 100000"

    # fix sqlite
    - name: fix sqlite3
      run: |
        sudo sed -i -z 's/,\n[^\n]*arm[^\n]*//' vscode/node_modules/vscode-sqlite3/binding.gyp
        sudo sed -i "s/Release\/sqlite'/Release\/sqlite.node'/" vscode/node_modules/vscode-sqlite3/lib/sqlite3.js
    
    # 64 bit build
    # rebuild sqlite for 64bit
    - name: rebuild sqlite3 for 64bit
      run: |
        docker run -v $(pwd)/vscode:/vscode builder64 /bin/bash -c "yarn --cwd vscode add -D electron-rebuild --network-timout 100000"
        docker run -v $(pwd)/vscode:/vscode builder64 /bin/bash -c "cd vscode; npx vscode electron-rebuild -f -w vscode-sqlite3; cd /"

    # compile
    # - name: yarn compile
    #   run: docker run -v $(pwd)/vscode:/vscode builder /bin/bash -c "yarn --cwd vscode compile --network-timout 100000"

    # # download extensions
    # - name: yarn download-builtin-extensions
    #   run: docker run -v $(pwd)/vscode:/vscode builder /bin/bash -c "yarn --cwd vscode download-builtin-extensions --network-timout 100000"

    # yarn build min and build deb - 64bit
    - name: yarn minify and deb build 64-bit
      run: docker run -v $(pwd)/vscode:/vscode builder64 /bin/bash -c "cd /vscode; ls -al; yarn run gulp vscode-linux-arm64-min; yarn run gulp vscode-linux-arm64-build-deb"

    # 32 bit build
    # reduce gulp memory below 4GB
    - name: reduce gulp memory footprint for 32bit systems
      run: sed -i 's/8192/3584/g' vscode/package.json

    # rebuild sqlite for 32bit
    - name: rebuild sqlite3 for 32bit
      run: |
        docker run -v $(pwd)/vscode:/vscode builder32 /bin/bash -c "yarn --cwd vscode add -D electron-rebuild --network-timout 100000"
        docker run -v $(pwd)/vscode:/vscode builder32 /bin/bash -c "cd vscode; npx vscode electron-rebuild -f -w vscode-sqlite3; cd /"

    # yarn build min and build deb - 32bit
    - name: yarn minify and deb build 32-bit
      run: docker run -v $(pwd)/vscode:/vscode builder32 /bin/bash -c "cd /vscode; ls -al; yarn run gulp vscode-linux-arm-min; yarn run gulp vscode-linux-arm-build-deb"

    # check build dir
    - name: list deb files
      run: find ./vscode/.build -type f -name "*.deb"

    # upload debs as release. using hub cli
    - name: release debs
      run: |
        set -x
        assets=()
        for asset in $(find ./vscode/.build -type f -name "*.deb"); do
          assets+=("-a" "$asset")
        done
        tag_name="${GITHUB_REF##*/}"
        hub release create "${assets[@]}" -m "$tag_name" "$tag_name"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
